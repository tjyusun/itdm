<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2019-2020 Timothy Yusun -->
<!-- This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License-->
<!-- https://creativecommons.org/licenses/by-nc-sa/4.0 -->

<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec-graph-trees">
    <title>Connectedness and Trees</title>
    <objectives>
        <ul>
            <li>Define connectedness; determine whether a given graph is connected or disconnected.</li>
            <li>Define trees; give necessary and sufficient conditions for a graph to be a tree.</li>
            <li>Prove simple statements about trees and connectedness of graphs, in particular utilizing proof by contradiction and structural induction on graphs.</li>
        </ul>
    </objectives>

    <p>
    	As we mentioned in <xref ref="sec-graph-modeling"/> the power of graph theory is that it allows us to abstract only the relevant details about the structure underlying a given scenario, regardless of the original context of the problem.
    	A <alert>tree</alert> is a special type of graph that arises in several real-world applications. For instance, it is a prominent data type in computer science; it is seen whenever the structure being described has an underlying hierarchy or order.
    </p>
    <p>
    	We first restate some definitions you've seen before and give a bit more detail.
	    Recall that a <xref ref="def-path" text="custom">path</xref> is a trail with no repeated vertices.
	</p>
    <definition xml:id="def-path-graph">
    	<title>Path Graph</title>
    	<statement>
    		<p>
    			A <term>path graph</term> is any graph isomorphic to a path on <m>n</m> vertices and is denoted by <m>P_n</m>.
    		<notation>
    			<usage>P_n</usage>
    			<description>path graph on <m>n</m> vertices</description>
    		</notation>
    		</p>
    	</statement>
    </definition>
    
    <example xml:id="eg-path-graph">
    	<title><m>P_6</m>, or the Path on Six Vertices</title>
    	<statement>
    		<p>
    			Two different drawings of the graph <m>P_6</m>:
    		</p>
    		<sidebyside widths="27% 11%" margins="25%" valign="middle">
    			<image xml:id="img-p6-1">
    				<latex-image>
    					\begin{tikzpicture}[scale=0.6]
						\begin{scope}[every node/.style={opacity=0.8,fill=black,circle, inner sep = 1.5pt, minimum size = 0pt}]
						\node (1) at (0,0) {};
						\node (2) at (1,0) {};
						\node (3) at (2,0) {};
						\node (4) at (3,0) {};
						\node (5) at (4,0) {};
						\node (6) at (5,0) {};
						\end{scope}

						%\node[] at (2,-1) {$H$};
						\begin{scope}[>={Stealth[black]},
						              %every node/.style={fill=black,circle},
						              every edge/.style={thick,draw=black}]
						    \draw[thick,-] (1) -- (2) -- (3) -- (4) -- (5) -- (6);
						    %\draw[thick,-] (4) -- node[above]{\footnotesize $1$} (5);
						\end{scope}
						\end{tikzpicture}
    				</latex-image>
    			</image>
    			<image xml:id="img-p6-2">
    				<latex-image>
    					\begin{tikzpicture}[scale=0.6]
						\begin{scope}[every node/.style={opacity=0.8,fill=black,circle, inner sep = 1.5pt, minimum size = 0pt}]
						\node (1) at (1,2) {};
						\node (2) at (-1,0) {};
						\node (3) at (0,2) {};
						\node (4) at (0,0) {};
						\node (5) at (-1,2) {};
						\node (6) at (1,0) {};
						\end{scope}

						%\node[] at (2,-1) {$H$};
						\begin{scope}[>={Stealth[black]},
						              %every node/.style={fill=black,circle},
						              every edge/.style={thick,draw=black}]
						    \draw[thick,-] (1) -- (2) -- (3) -- (4) -- (5) -- (6);
						    %\draw[thick,-] (4) -- node[above]{\footnotesize $1$} (5);
						\end{scope}
						\end{tikzpicture}
    				</latex-image>
    			</image>
    		</sidebyside>
    	</statement>
    </example>

	<sidebyside>    
    <video xml:id="video-connectedness" youtube="QycrK3MP0Zo" play-at="embed" />
    </sidebyside>
    <p>
        <alert>Video</alert>: <em>Connectedness</em>
    </p>

    <p>
    	A graph is <xref ref="def-connected" text="custom">connected</xref> if there are paths between any two of its vertices.
    </p>
    <definition xml:id="def-connected-component">
    	<title>Connected Component</title>
    	<statement>
    		<p>
    			A <term>connected component</term> of a graph <m>G</m> is any connected subgraph of <m>G</m> that is not contained in any other connected subgraph (<ie/> the maximal connected subgraphs of <m>G</m>).
    		</p>
    	</statement>
    </definition>

    <p>
    	If there exists a <m>u</m>-<m>v</m> path on a graph <m>G</m>, we also say that <m>u</m> and <m>v</m> <term>are connected</term> on <m>G</m>.
	</p>

	<exercise xml:id="ex-path-connected">
		<title><m>P_6</m> is connected</title>
		<statement>
			<p>
				Verify that the graph <m>P_6</m> is connected.
			</p>
		</statement>
	</exercise>

	<example xml:id="eg-graph-connected-component">
		<title>Connected and Disconnected</title>
		<statement>
			<p>
				The graph <m>G</m> is not connected since not all pairs of vertices are endpoints of some path.
				For example, there is no path joining 1 and 6; nor is there one joining 3 and 4.
			</p>
			<sidebyside width="27%" margins="auto">
				<image xml:id="img-connected-1">
					<latex-image>
						\begin{tikzpicture}[scale=0.6]
						\begin{scope}[every node/.style={opacity=0.8,fill=black,circle, inner sep = 1.5pt, minimum size = 0pt}]
						\node[label=left:{\footnotesize $1$}] (1) at (1,1) {};
						\node[label=left:{\footnotesize $2$}] (2) at (2,3) {};
						\node[label=right:{\footnotesize $3$}] (3) at (3,2) {};
						\node[label=right:{\footnotesize $4$}] (4) at (5,3) {};
						\node[label=left:{\footnotesize $5$}] (5) at (4,1) {};
						\node[label=right:{\footnotesize $6$}] (6) at (6,1) {};
						\end{scope}

						\node[] at (3.5,0) {$G$};
						\begin{scope}[>={Stealth[black]},
						              %every node/.style={fill=black,circle},
						              every edge/.style={thick,draw=black}]
						    \draw[thick,-] (1) -- (2) -- (3) -- (1);
						    \draw[thick,-] (4) -- (6) -- (5);
						    %\draw[thick,-] (4) -- node[above]{\footnotesize $1$} (5);
						\end{scope}
						\end{tikzpicture}
					</latex-image>
				</image>
			</sidebyside>
			<p>
				The graph <m>G</m> has two connected components: one is the <m>C_3</m> subgraph formed by the vertices <m>\{1,2,3\}</m>, and the other one is a path of length three (<m>P_3</m>) formed by the vertices <m>\{4,5,6\}</m>.
				These are the <em>maximal</em> connected subgraphs of <m>G</m>.
				(On the other hand, the path 1-2-3 is <em>not</em> a maximal connected subgraph, since it is a subgraph of the cycle 1-2-3-1.)
			</p>
			<sidebyside width="20%" margins="auto">
				<image xml:id="img-connected-2">
					<latex-image>
						\begin{tikzpicture}[scale=0.6]
						\begin{scope}[every node/.style={opacity=0.8,fill=black,circle, inner sep = 1.5pt, minimum size = 0pt}]
						\node[label=left:{\footnotesize $1$}] (1) at (1,2) {};
						\node[label=left:{\footnotesize $2$}] (2) at (2,1) {};
						\node[label=left:{\footnotesize $3$}] (3) at (3,2) {};
						\node[label=left:{\footnotesize $4$}] (4) at (2,3) {};
						\node[label=right:{\footnotesize $5$}] (5) at (4,1) {};
						\node[label=right:{\footnotesize $6$}] (6) at (4,3) {};
						\end{scope}

						\node[] at (3,0) {$H$};
						\begin{scope}[>={Stealth[black]},
						              %every node/.style={fill=black,circle},
						              every edge/.style={thick,draw=black}]
						    \draw[thick,-] (1) -- (2) -- (3) -- (4) -- (1);
						    \draw[thick,-] (3) -- (5) -- (6) -- (3);
						    %\draw[thick,-] (4) -- node[above]{\footnotesize $1$} (5);
						\end{scope}
						\end{tikzpicture}
					</latex-image>
				</image>
			</sidebyside>
			<p>
				The graph <m>H</m> is connected, since between any two of its vertices one can find a path.
				For example, if we pick vertices 1 and 5, we can find a 1-5 path: 1-2-3-5. 
				In fact there is another path (1-4-3-5) but we only need at least one for each vertex pair to satisfy the condition of connectedness.
			</p>
		</statement>
	</example>

	<exercise xml:id="ex-which-connected">
		<title>Which Graphs are Connected?</title>
		<statement>
			<p>
				Which of the following graphs are connected?
			</p>
			<sidebyside widths="15% 15% 15%" margins="auto">
				<image xml:id="img-which-connected-1">
					<latex-image>
						\begin{tikzpicture}[scale=0.7]
						\begin{scope}[every node/.style={opacity=0.8,fill=black,circle, inner sep = 1.5pt, minimum size = 0pt}]
						\node (1) at (1,2) {};
						\node (2) at (-1,0) {};
						\node (3) at (0,2) {};
						\node (4) at (0,0) {};
						\node (5) at (-1,2) {};
						\node (6) at (1,0) {};
						\end{scope}

						%\node[] at (2,-1) {$H$};
						\begin{scope}[>={Stealth[black]},
						              %every node/.style={fill=black,circle},
						              every edge/.style={thick,draw=black}]
						    \draw[thick,-] (1) -- (2) -- (3) -- (4) -- (5) -- (6) -- (1);
						    %\draw[thick,-] (4) -- node[above]{\footnotesize $1$} (5);
						\end{scope}
						\end{tikzpicture}
					</latex-image>
				</image>
				<image xml:id="img-which-connected-2">
					<latex-image>
						\begin{tikzpicture}[scale=0.7]
						\begin{scope}[every node/.style={opacity=0.8,fill=black,circle, inner sep = 1.5pt, minimum size = 0pt}]
						\node (1) at (1,2) {};
						\node (2) at (-1,0) {};
						\node (3) at (0,2) {};
						\node (4) at (0,0) {};
						\node (5) at (-1,2) {};
						\node (6) at (1,0) {};
						\end{scope}

						%\node[] at (2,-1) {$H$};
						\begin{scope}[>={Stealth[black]},
						              %every node/.style={fill=black,circle},
						              every edge/.style={thick,draw=black}]
						    \draw[thick,-] (1) -- (2) -- (3) -- (4) -- (1);
						    \draw[thick,-] (5) -- (6);
						    %\draw[thick,-] (4) -- node[above]{\footnotesize $1$} (5);
						\end{scope}
						\end{tikzpicture}
					</latex-image>
				</image>
				<image xml:id="img-which-connected-3">
					<latex-image>
						\begin{tikzpicture}[scale=0.7]
						\begin{scope}[every node/.style={opacity=0.8,fill=black,circle, inner sep = 1.5pt, minimum size = 0pt}]
						\node (1) at (1,2) {};
						\node (2) at (-1,0) {};
						\node (3) at (0,2) {};
						\node (4) at (0,0) {};
						\node (5) at (-1,2) {};
						\node (6) at (1,0) {};
						\end{scope}

						%\node[] at (2,-1) {$H$};
						\begin{scope}[>={Stealth[black]},
						              %every node/.style={fill=black,circle},
						              every edge/.style={thick,draw=black}]
						    \draw[thick,-] (1) -- (2) -- (3) -- (4) -- (5) -- (6) -- (1);
						    \draw[thick,-] (1) -- (4);
						    \draw[thick,-] (2) -- (5);
						    \draw[thick,-] (3) -- (6);
						    %\draw[thick,-] (4) -- node[above]{\footnotesize $1$} (5);
						\end{scope}
						\end{tikzpicture}
					</latex-image>
				</image>
			</sidebyside>
		</statement>
	</exercise>
    

	<exercise xml:id="ex-isomorphic-connected">
		<title>Connectedness is Invariant under Isomorphism</title>
		<statement>
			<p>
				Prove that if <m>G_1 = (V_1,E_1)</m> and <m>G_2 = (V_2,E_2)</m> are isomorphic, and <m>G_1</m> is connected, then <m>G_2</m> must be connected as well.
			</p>
		</statement>
	</exercise>

	<p>
		If a graph is connected, and contains no copies of <m>C_n</m> for any <m>n</m> (<ie/> it does not have cycles) then we call it a tree.
	</p>

	<sidebyside>    
    <video xml:id="video-trees" youtube="Ot_5cM3vvyE" play-at="embed" />
    </sidebyside>
    <p>
        <alert>Video</alert>: <em>Trees</em>
    </p>

	<definition xml:id="def-tree">
		<title>Tree, Forest</title>
		<statement>
			<p>
				A <term>tree</term> is a simple connected graph that contains no cycles as a subgraph.
			</p>
			<p>
				A <term>forest</term> is a simple graph that contains no cycles as a subgraph.
			</p>
		</statement>
	</definition>
	
	<p>
		As to be expected, a forest is simply a collection of trees.
		Technically, by <xref ref="def-tree"/> a single tree can be called a forest as well.
	</p>
	<aside><p>While the graph-theoretic definition of a forest is unambiguous, in the real world it is quite imprecise: <url href="https://www.nature.org/en-us/what-we-do/our-insights/perspectives/how-many-trees-make-a-forest/">How many trees make a forest?</url></p></aside>

	<example xml:id="eg-tree-forest">
		<title>Trees and Forests and Actual Trees</title>
		<statement>
			<sidebyside widths="20% 20% 20% 18%" margins="auto" valign="bottom">
				<image xml:id="img-tree-forest-1">
					<latex-image>
						\begin{tikzpicture}[scale=0.7]
						\begin{scope}[every node/.style={opacity=0.8,fill=black,circle, inner sep = 1.5pt, minimum size = 0pt}]
						\node (1) at (1,1) {};
						\node (2) at (2,1) {};
						\node (3) at (3,1) {};
						\node (4) at (4,1) {};
						\node (5) at (2,2) {};
						\node (6) at (2,3) {};
						\end{scope}

						\begin{scope}[>={Stealth[black]},
						              %every node/.style={fill=black,circle},
						              every edge/.style={thick,draw=black}]
						    \draw[thick,-] (1) -- (2) -- (3) -- (4);
						    \draw[thick,-] (2) -- (5) -- (6);
						    %\draw[thick,-] (4) -- node[above]{\footnotesize $1$} (5);
						\end{scope}
						\end{tikzpicture}
					</latex-image>
				</image>
				<image xml:id="img-tree-forest-2">
					<latex-image>
						\begin{tikzpicture}[scale=0.7]
						\begin{scope}[every node/.style={opacity=0.8,fill=black,circle, inner sep = 1.5pt, minimum size = 0pt}]
						\node (1) at (1,1) {};
						\node (2) at (2,1) {};
						\node (3) at (3,1) {};
						\node (4) at (4,1) {};
						\node (5) at (2,2) {};
						\node (6) at (2,3) {};
						\end{scope}

						\begin{scope}[>={Stealth[black]},
						              %every node/.style={fill=black,circle},
						              every edge/.style={thick,draw=black}]
						    \draw[thick,-] (1) -- (2);
						    \draw[thick,-] (3) -- (4);
						    \draw[thick,-] (2) -- (5) -- (6);
						    %\draw[thick,-] (4) -- node[above]{\footnotesize $1$} (5);
						\end{scope}
						\end{tikzpicture}
					</latex-image>
				</image>
				<image xml:id="img-tree-forest-3">
					<latex-image>
						\begin{tikzpicture}[scale=0.7]
						\begin{scope}[every node/.style={opacity=0.8,fill=black,circle, inner sep = 1.5pt, minimum size = 0pt}]
						\node (1) at (1,1) {};
						\node (2) at (2,1) {};
						\node (3) at (3,1) {};
						\node (4) at (4,1) {};
						\node (5) at (2,2) {};
						\node (6) at (2,3) {};
						\end{scope}

						\begin{scope}[>={Stealth[black]},
						              %every node/.style={fill=black,circle},
						              every edge/.style={thick,draw=black}]
						    \draw[thick,-] (1) -- (2) -- (5) -- (6);
						    \draw[thick,-] (2) -- (3) -- (4);
						    \draw[thick,-] (1) -- (5);
						    %\draw[thick,-] (4) -- node[above]{\footnotesize $1$} (5);
						\end{scope}
						\end{tikzpicture}
					</latex-image>
				</image>
				<image source="images/tree.png"><description>A drawing of an actual, non-graph tree.</description></image>
			</sidebyside>
			<sidebyside widths="20% 20% 20% 18%" margins="auto">
				<p>A tree on six vertices (also a forest)</p>
				<p>A forest on six vertices (not a tree)</p>
				<p>A connected graph (not a tree)</p>
				<p>A tree (not a graph)</p>
			</sidebyside>
		</statement>
	</example>

	<exercise xml:id="ex-nonisomorphic-trees">
		<title>Find all Trees</title>
		<statement>
			<p>
				Find all nonisomorphic trees on 
				<ol label="(a)">
					<li>four vertices;</li>
					<li>five vertices.</li>
				</ol>
			</p>
		</statement>
	</exercise>

	<p>
		In a sense, trees are the minimally connected graphs, since removing any edge from a tree results in a disconnected graph.
	</p>

	<proposition xml:id="prop-tree-remove-edge-disconnect">
		<title>Tree Minus an Edge is Disconnected</title>
		<statement>
			<p>
				Let <m>G = (V,E)</m> be a tree, and <m>(u,v) \in E</m> an edge of <m>G</m>. 
				Then the graph <m>G' = \left(V, E \setminus \{(u,v)\}\right)</m> is disconnected.
			</p>
		</statement>
		<proof>
			<p>
				We proceed by contradiction. 
				Assume that the graph <m>G'</m> remains connected after removing the edge <m>(u,v)</m>.
				Then by the definition of connectnedness there is a <m>u</m>-<m>v</m> path in <m>G'</m>.
			</p>
			<sidebyside widths="75% 18%" margins="0%">
			<p>
				But this means that there had to have been a cycle in the original graph <m>G</m>, consisting of the <m>u</m>-<m>v</m> path in <m>G'</m> and the edge <m>(u,v)</m>.
				This contradicts the assumption that <m>G</m> was a tree.
				Therefore removing any edge from <m>G</m> results in a disconnected graph.
			</p>
			<image xml:id="img-proof-tree-minus-edge">
				<latex-image>
					\begin{tikzpicture}[scale=0.7]
					\begin{scope}[every node/.style={opacity=0.8,fill=black,circle, inner sep = 1.5pt, minimum size = 0pt}]
					\node (1) at (1,1) {};
					\node[label=below:{\small $u$}] (2) at (2,1) {};
					\node[label=below:{\small $v$}] (3) at (3,1) {};
					\node (4) at (4,1) {};
					\node (5) at (2,2) {};
					\node (6) at (2,3) {};
					\node (7) at (3,2) {};
					\node (8) at (4,0) {};
					\end{scope}

					\begin{scope}[>={Stealth[black]},
					              %every node/.style={fill=black,circle},
					              every edge/.style={thick,draw=black}]
					    \draw[thick,-] (1) -- (2) -- (5) -- (6);
					    \draw[thick,-] (3) -- (4) -- (8);
					    \draw[thick,-] (5) -- (7);
					    \draw[thick,-,dashed] (2) -- (3);
					    %\draw[thick,-] (4) -- node[above]{\footnotesize $1$} (5);
					\end{scope}
					\end{tikzpicture}
				</latex-image>
			</image>
			</sidebyside>
		</proof>
	</proposition>

	<p>
		Our main result in this section is the relationship between the number of vertices and the number of edges in a tree.
		We first give one more definition and then prove an auxiliary result.
	</p>

	<definition xml:id="def-leaf">
		<title>Leaf</title>
		<statement>
			<p>
				A <term>leaf</term> in a tree is a vertex with degree 1.
			</p>
		</statement>
	</definition>

	<lemma xml:id="lem-tree-number-leaves">
		<title>A Tree must have at least Two Leaves</title>
		<statement>
			<p>
				If <m>G</m> is a tree on at least two vertices, then it has at least two leaves.
			</p>
		</statement>
	</lemma>

	<exploration xml:id="expl-tree-number-leaves">
		<title>Proving <xref ref="lem-tree-number-leaves"/></title>
		<introduction>
			<p>
				Let's work through the proof of <xref ref="lem-tree-number-leaves"/> together!
				This is a proof by contradiction, so we start by assuming the opposite of the desired conclusion.
				That is: let's assume that <m>G = (V,E)</m> is a tree on at least two vertices, such that it has <alert>only one leaf or none at all</alert>.
			</p>
		</introduction>
		<task>
			<p>
				We say that a path in a graph is <em>maximal</em> if we cannot add any more vertices to either end to make it longer. (For example, the path <m>v_2</m>-<m>v_1</m>-<m>v_4</m>-<m>v_5</m> in <xref ref="eg-graph-first"/> is maximal.)
			</p>
			<p>
				Explain why we can always find a maximal path in a tree on at least two vertices (in fact, in any graph that has at least one edge).
			</p>
		</task>
		<task>
			<p>
				Take a maximal path <m>P</m> in <m>G</m> and call its vertices <m>x_1,x_2,\ldots,x_k</m>.
			</p>
			<sidebyside width="40%" margins="auto">
				<image xml:id="img-maximal-path">
					<latex-image>
						\begin{tikzpicture}[scale=0.5]
						\begin{scope}[every node/.style={opacity=0.8,fill=black,circle, inner sep = 1.5pt, minimum size = 0pt}]
						\node[label=below:{\small $x_1$}] (1) at (-2,0) {};
						\node[label=below:{\small $x_2$}] (2) at (0,1) {};
						\node[label=below:{\small $x_3$}] (3) at (2,0) {};
						\node[label={[label distance=-0.15cm]270:{\small $x_{k-2}$}}] (4) at (5,0) {};
						\node[label={[label distance=-0.15cm]270:{\small $x_{k-1}$}}] (5) at (7,1) {};
						\node[label=below:{\small $x_k$}] (6) at (9,0.5) {};
						\end{scope}

						\node[] at (3.5,0) {$\cdots$};
						\begin{scope}[>={Stealth[black]},
						              %every node/.style={fill=black,circle},
						              every edge/.style={thick,draw=black}]
						    \draw[thick,-] (1) -- (2) -- (3);
						    \draw[thick,-] (4) -- (5) -- (6);
						    %\draw[thick,-] (4) -- node[above]{\footnotesize $1$} (5);
						\end{scope}
						\end{tikzpicture}
					</latex-image>
				</image>
			</sidebyside>
			<p>
				Given the assumption that <m>G</m> has fewer than two leaves, what can we conclude about <m>x_1</m> and <m>x_k</m>?
				(Hint: what about their degrees?)
			</p>
		</task>
		<task>
			<p>
				Show that your conclusion from (b) will inevitably lead to one of the following contradictions:
				<ul>
					<li>that the path <m>P</m> was not maximal after all;</li>
					<li>that the graph <m>G</m> could not have been a tree to begin with.</li>
				</ul>
			</p>
		</task>
	</exploration>

	<exercise xml:id="ex-maximal-paths">
		<title>Maximal Paths in Graphs</title>
		<statement>
			<p>
				In <xref ref="expl-tree-number-leaves"/> we claimed that we can always find a maximal path in a graph with at least one edge.
				Find <em>all</em> maximal paths in each graph below.
				Do maximal paths of a graph always have the same number of vertices?
			</p>
			<sidebyside widths="20% 12% 12% 20%" margins="auto" valign="middle">
				<image xml:id="img-find-maximal-path-1">
					<latex-image>
						\begin{tikzpicture}[scale=0.7]
						\begin{scope}[every node/.style={opacity=0.8,fill=black,circle, inner sep = 1.5pt, minimum size = 0pt}]
						\node (1) at (1,1) {};
						\node (2) at (2,1) {};
						\node (3) at (3,1) {};
						\node (4) at (4,1) {};
						\node (5) at (2,2) {};
						\node (6) at (2,3) {};
						\end{scope}

						\begin{scope}[>={Stealth[black]},
						              %every node/.style={fill=black,circle},
						              every edge/.style={thick,draw=black}]
						    \draw[thick,-] (1) -- (2) -- (3) -- (4);
						    \draw[thick,-] (2) -- (5) -- (6);
						\end{scope}
						\end{tikzpicture}
					</latex-image>
				</image>
				<image xml:id="img-find-maximal-path-2">
					<latex-image>
						\begin{tikzpicture}[scale=0.6]
						\begin{scope}[every node/.style={opacity=0.8,fill=black,circle, inner sep = 1.5pt, minimum size = 0pt}]
						\node (1) at (0,0) {};
						\node (2) at (1,1) {};
						\node (3) at (2,2) {};
						\node (4) at (2,0) {};
						\node (5) at (1,3) {};
						\end{scope}

						\begin{scope}[>={Stealth[black]},
						              %every node/.style={fill=black,circle},
						              every edge/.style={thick,draw=black}]
						    \draw[thick,-] (1) -- (2) -- (3) -- (4) -- (5);
						    %\draw[thick,-] (4) -- node[above]{\footnotesize $1$} (5);
						\end{scope}
						\end{tikzpicture}
					</latex-image>
				</image>
				<image xml:id="img-find-maximal-path-3">
					<latex-image>
						\begin{tikzpicture}[scale=0.6]
						\begin{scope}[every node/.style={opacity=0.8,fill=black,circle, inner sep = 1.5pt, minimum size = 0pt}]
						\node (1) at (0,0) {};
						\node (2) at (0,1) {};
						\node (3) at (0,2) {};
						\node (4) at (0,3) {};
						\node (5) at (2,0) {};
						\node (6) at (2,1) {};
						\node (7) at (2,2) {};
						\node (8) at (2,3) {};
						\end{scope}

						\begin{scope}[>={Stealth[black]},
						              %every node/.style={fill=black,circle},
						              every edge/.style={thick,draw=black}]
						    \draw[thick,-] (1) -- (2) -- (3) -- (4);
						    \draw[thick,-] (5) -- (6) -- (7) -- (8);
						    \draw[thick,-] (2) -- (7);
						    %\draw[thick,-] (4) -- node[above]{\footnotesize $1$} (5);
						\end{scope}
						\end{tikzpicture}
					</latex-image>
				</image>
				<image xml:id="img-find-maximal-path-4">
					<latex-image>
						\begin{tikzpicture}[scale=0.6]
						\begin{scope}[every node/.style={opacity=0.8,fill=black,circle, inner sep = 1.5pt, minimum size = 0pt}]
						\node (1) at (0,2) {};
						\node (2) at (-1,1) {};
						\node (3) at (1,1) {};
						\node (4) at (-1.5,0) {};
						\node (5) at (-0.5,0) {};
						\node (6) at (0.5,0) {};
						\node (7) at (1.5,0) {};
						\node (8) at (-2,-1) {};
						\node (9) at (0,-1) {};
						\node (10) at (1,-1) {};
						\end{scope}

						\begin{scope}[>={Stealth[black]},
						              %every node/.style={fill=black,circle},
						              every edge/.style={thick,draw=black}]
						    \draw[thick,-] (2) -- (1) -- (3);
						    \draw[thick,-] (8) -- (4) -- (2) -- (5);
						    \draw[thick,-] (6) -- (3) -- (7);
						    \draw[thick,-] (10) -- (6) -- (9);
						\end{scope}
						\end{tikzpicture}
					</latex-image>
				</image>
			</sidebyside>
		</statement>
	</exercise>

	<exercise xml:id="ex-verify-lemma-leaves">
		<title>Verify <xref ref="lem-tree-number-leaves"/></title>
		<statement>
			<p>
				Verify <xref ref="lem-tree-number-leaves"/> on each graph in <xref ref="ex-maximal-paths"/>.
			</p>
		</statement>
	</exercise>

	<exercise xml:id="ex-max-leaves">
		<title>Maximum Leaves</title>
		<statement>
			<p>
				<xref ref="lem-tree-number-leaves"/> gives the minimum number of leaves in any tree on at least two vertices. What is the maximum number of leaves in a tree on <m>n</m> vertices?
			</p>
		</statement>
	</exercise>

	<exercise xml:id="ex-min-max-leaves-forest">
		<title>Leaves in a Forest</title>
		<statement>
			<p>
				What is the minimum and maximum number of leaves in a forest that has <m>k</m> connected components (assume the components have <m>n_1, n_2, \ldots, n_k</m> vertices)?
			</p>
		</statement>
	</exercise>

	<p>
		Before we state our main result, try studying the trees of <xref ref="ex-maximal-paths"/>.
		Do you notice a relationship between the number of vertices and the number of edges of each graph?
	</p>

	<sidebyside>    
    <video xml:id="video-char-trees" youtube="804i5sIS-pg" play-at="embed" />
    </sidebyside>
    <p>
        <alert>Video</alert>: <em>Characterization of Trees</em>
    </p>

	<theorem xml:id="thm-tree-n-1">
		<title>Trees have <m>|V|-1</m> Edges</title>
		<statement>
			<p>
				A tree on <m>|V| = n</m> vertices has <m>|E| = n-1</m> edges.
			</p>
		</statement>
		<proof>
			<p>
				We proceed by induction on the number of vertices <m>|V|</m> in the tree.
				The claim is:
			</p>
			<sidebyside width="75%" margins="auto">
				<p>
					<m>P(n):</m> All trees with <m>n</m> vertices have <m>n-1</m> edges.
				</p>
			</sidebyside>
			<p>
				<alert>Base case</alert>: <m>P(1)</m> is clearly true, since a tree on one vertex has no edge.
			</p>
			<p>
				<alert>Induction step</alert>: Assume that <m>P(k-1)</m> holds; that is, any tree with <m>k-1</m> vertices has <m>k-2</m> edges.
			</p>
			<p>
				To prove <m>P(k)</m> holds, let <m>G</m> be an arbitrary tree on <m>k</m> vertices.
				By <xref ref="lem-tree-number-leaves"/>, <m>G</m> must have a leaf, or a vertex <m>v</m> with <m>d(v) = 1</m>.
			</p>
			<p>
				Remove the vertex <m>v</m> from the tree and the one edge it is an endpoint of.
				The resulting graph <m>G'</m> is still a tree (it must still be connected and have no cycles, since we only removed a leaf), but with <m>k-1</m> vertices. 
				By the induction hypothesis, <m>G'</m> has <m>k-2</m> edges.
			</p>
			<p>
				Therefore the original graph <m>G</m> must have had <m>k-1</m> edges (adding back what was removed with <m>v</m>).
			</p>
			<p>
				This completes the proof.
			</p>
		</proof>
	</theorem>

	<p>
		It is interesting to note that the converse of <xref ref="thm-tree-n-1"/> is actually true.
	</p>

	<theorem xml:id="thm-n-1-tree">
		<title>Converse of <xref ref="thm-tree-n-1"/></title>
		<statement>
			<p>
				If <m>G</m> is a connected simple graph on <m>n</m> vertices and <m>n-1</m> edges, then <m>G</m> must be a tree.
			</p>
		</statement>
		<proof>
			<p>
				Let <m>G</m> be a connected graph on <m>n</m> vertices and <m>n-1</m> edges. 
				Towards a contradiction, assume <m>G</m>has at least one cycle. 
			</p>
			<p>
				Construct a new graph <m>G'</m> by removing an edge from a cycle in <m>G</m>. 
				Then <m>G'</m> remains connected (why?).
			</p>
			<p>
				Continue this process until we obtain a graph <m>H</m> with no cycles.
				Then by definition, <m>H</m> must be a tree (connected and acyclic).
				Observe that <m>H</m> has <m>n</m> vertices but strictly fewer than <m>n-1</m> edges since we removed at least one edge from <m>G</m> to obtain <m>H</m>.
				This contradicts <xref ref="thm-tree-n-1"/>.
			</p>
			<p>
				Hence <m>G</m> must have had no cycles to begin with.
				This implies <m>G</m> is a tree.
			</p>
		</proof>
	</theorem>

	<p>
		We now summarize both results into one nice characterization of trees.
	</p>

	<theorem xml:id="thm-trees">
		<title>Characterization of Trees</title>
		<statement>
			<p>
				If <m>G = (V,E)</m> is a connected simple graph, then <m>|E| = |V| - 1</m> if and only if <m>G</m> is a tree.
			</p>
		</statement>
	</theorem>

	<exercise xml:id="ex-not-a-tree">
		<title>Connectedness is Required</title>
		<statement>
			<p>
				Find an example of a simple graph on <m>n</m> vertices and <m>n-1</m> edges that is not a tree.
			</p>
		</statement>
	</exercise>

</section>