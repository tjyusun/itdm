<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2019-2020 Timothy Yusun -->
<!-- This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License-->
<!-- https://creativecommons.org/licenses/by-nc-sa/4.0 -->

<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec-basic-counting">
    <title>The Basic Counting Principles</title>
        <objectives>
        <ul>
            <li>State the Sum Rule and the Product Rule, and explain how the Product Rule derives from the Sum Rule.</li>
            <li>Given a counting problem, partition the objects being counted into subsets that facilitate the use of the Sum Rule.</li>
            <li>Given a counting problem, describe the steps necessary to form the object or scenario being counted, and apply the Product Rule.</li>
        </ul>
    </objectives>
    
    
    <sidebyside>    
        <video xml:id="video-intro-to-counting" youtube="VEF1B5ZLVOE" play-at="embed" />
    </sidebyside>
    <p>
        <alert>Video</alert>: <em>Introduction to Counting</em>
    </p>
    
    <p>
        In this section (and chapter) we will develop techniques for counting!
        When you hear the word <em>count</em> you probably think about <em>listing</em> or <em>enumerating</em> objects.
        
        For example:
        
        <ul>
            <li>How many siblings do you have?</li>
            <li>Count the number of students enrolled in MAT202 this term.</li>
            <li>How many buildings are there on the UTM campus?</li>
        </ul>

    Often we are also interested in counting the number of different ways some given scenario or condition can happen. For instance, consider the following example:
    </p>

    <example xml:id="eg-counting-writing-project">
        <title>First Counting Example</title>
            <statement>
            <p>
                Three friends Andrea, Doug, and Steven are working together on a group project and they are trying to delegate the writing among themselves based on sections: introduction, literature review, and conclusion (everyone will work on the analysis).
            </p>
            <p>
                How many possible ways can the tasks be assigned to the three friends?
            </p>
            </statement>
            <solution>
                <p>
                Let's abbreviate their names as A, D, and S.
                We can just list all possibilities to find that there are 6 ways:
                </p>
                <sidebyside width="60%" margins="auto">
                <tabular>
                    <row>
                        <cell right="medium">Introduction</cell>
                        <cell>A</cell>
                        <cell>A</cell>
                        <cell>D</cell>
                        <cell>D</cell>
                        <cell>S</cell>
                        <cell>S</cell>
                    </row>
                    <row>
                        <cell right="medium">Lit Review</cell>
                        <cell>D</cell>
                        <cell>S</cell>
                        <cell>A</cell>
                        <cell>S</cell>
                        <cell>A</cell>
                        <cell>D</cell>
                    </row>
                    <row>
                        <cell right="medium">Conclusion</cell>
                        <cell>S</cell>
                        <cell>D</cell>
                        <cell>S</cell>
                        <cell>A</cell>
                        <cell>D</cell>
                        <cell>A</cell>
                    </row>
                </tabular>
                </sidebyside>
            </solution>
    </example>

    <p>
    <xref ref="eg-counting-writing-project"/> is small enough that we can count the number of possibilities by listing them. Can you do the same for the following exercise? What do you notice about your answer to part (a)?
    </p>

    <exercise xml:id="ex-counting-coldplay">
        <title>Concert Seating</title>
        <statement>
            <p>
                Three friends (Mina, Lisa, and Wendy) were able to get three seats together in a row at a Coldplay concert.
                <ol label="(a)">
                    <li>How many ways can they choose to sit?</li>
                    <li>How many ways can they sit if Lisa insists on sitting in the middle?</li>
                </ol>
            </p>
        </statement>
        <answer><p>a. 6; b. 2</p></answer>
        <solution>
            <p>
                a. Listing all possibilities yields 6 ways without any restrictions:
            </p>
                    <sidebyside width="80%" margins="auto">
                    <tabular>
                        <row>
                            <cell>(Mina, Lisa, Wendy)</cell>
                            <cell>(Lisa, Wendy, Mina)</cell>
                            <cell>(Wendy, Mina, Lisa)</cell>
                        </row>
                        <row>
                            <cell>(Mina, Wendy, Lisa)</cell>
                            <cell>(Lisa, Mina, Wendy)</cell>
                            <cell>(Wendy, Lisa, Mina)</cell>
                        </row>
                    </tabular>
                </sidebyside>
            <p>
                b. Exactly two of these seating arrangements has Lisa in the middle seat.
            </p>
        </solution>
    </exercise>

    <p>
        The techniques we will develop will help us count when the number of possibilities is too large that we can't simply list them all!
        For instance, the next example is one where listing all possibilities seems like a bad idea.
    </p>

    <example xml:id="eg-counting-dogs">
        <title>Dog Adoption</title>
        <statement>
        <p>
            There are 10 dogs up for adoption at your local animal shelter.
            You and 9 other friends decide to adopt one dog each.

            How many ways can you assign dogs to people?
        </p>
        
        <p><alert>Solution (but not really)</alert>
            If we first fix you and your friends in some specified order (human 1, human 2, human 3, and so on) and name the dogs A, B, C, up to J, then each adoption arrangement corresponds to an <em>ordering of the letters A to J in a list</em>, where the position of each letter corresponds to the person adopting that dog.
        </p>
        <p>
            For example, the arrangement 
        </p>
            <sidebyside width="80%" margins="auto">
            <tabular>
                <row>
                    <cell>J</cell>
                    <cell>I</cell>
                    <cell>H</cell>
                    <cell>G</cell>
                    <cell>F</cell>
                    <cell>E</cell>
                    <cell>D</cell>
                    <cell>C</cell>
                    <cell>B</cell>
                    <cell>A</cell>
                </row>
                <row>
                    <cell><m>\uparrow</m></cell>
                    <cell><m>\uparrow</m></cell>
                    <cell><m>\uparrow</m></cell>
                    <cell><m>\uparrow</m></cell>
                    <cell><m>\uparrow</m></cell>
                    <cell><m>\uparrow</m></cell>
                    <cell><m>\uparrow</m></cell>
                    <cell><m>\uparrow</m></cell>
                    <cell><m>\uparrow</m></cell>
                    <cell><m>\uparrow</m></cell>
                </row>
                <row>
                    <cell>1</cell>
                    <cell>2</cell>
                    <cell>3</cell>
                    <cell>4</cell>
                    <cell>5</cell>
                    <cell>6</cell>
                    <cell>7</cell>
                    <cell>8</cell>
                    <cell>9</cell>
                    <cell>10</cell>
                </row>
            </tabular>
            </sidebyside>
        <p>
            means that dog J is assigned to human 1, dog I is assigned to human 2, and so on, while the arrangement DJABECIHGF means dog D is assigned to human 1, dog J to human 2, and so on<ellipsis />
        </p>
        <p>
            You should quickly realize there are too many combinations to list!
        </p>
        </statement>
    </example>
    <p>
        When possible, it is a good idea to <em>exploit the structure</em> of what we are counting!
        Two rules for counting will help us get started: the Sum Rule and the Product Rule.
        Think about the following exercises:
    </p>
    <exercise xml:id="ex-counting-socks">
        <title>Socks!</title>
        <statement>
        <p>
            You plan to move to a new apartment by the end of the month, and while packing your clothes, you note that you have 3 pairs of black socks, 4 pairs of white socks, and 2 pairs of blue socks.
        </p>
        <p>
            How many pairs of socks do you have in total?
        </p>
        </statement>
        <answer><p>9</p></answer>
        <solution><p>It's not a trick question. <m>3 + 4 + 2 = 9</m>.</p></solution>
    </exercise>
    <exercise xml:id="ex-counting-test-papers">
        <title>Exam Counts</title>
        <statement>
        <p>
            After an in-person term test or final exam, the course instructor and TAs get together and first verify that the number of papers handed in matches the number of students who wrote the test.
        </p>
        
            <sidebyside widths="50%">
                <image source="figs/test-papers.jpg" width="50%"><description>Five piles of test papers on a brown desk.</description></image>
            <!--    <caption> So many papers to grade<ellipsis /></caption>
            -->
            </sidebyside>
            <p>
            Can you think of an efficient way to count the papers?            
        </p>
        </statement>
        <hint>
            <p>You wouldn't just count them one by one<ellipsis /></p>
        </hint>
    </exercise>
    <p>
        In <xref ref="ex-counting-socks"/> the problem of counting the total number of pairs of socks had a straightforward solution. 
        Since the socks were already separated by colour, and you knew how many of each colour you had, you just had to add the number of pairs for each colour to get the total.
    </p>
    <p>
        For the test papers in <xref ref="ex-counting-test-papers" /> there are certainly multiple ways to do this.
        One method that TAs use is to form piles of ten, and count how many piles are produced.
        This is actually more similar to the socks example than you might think.
        Separating the huge pile of papers into groups of 10 has the same goal as separating socks by colour: one just has to add the numbers in each pile together in the end (which, if all piles have 10, is an easy calculation). 
    </p>
    <p>
        This is the <term>Sum Rule</term> in action.
    </p>
      
    <sidebyside>    
        <video xml:id="video-sum-rule-and-partitions" youtube="5aiDfPpxbrY" play-at="embed"  />
    </sidebyside>
    <p>
        <alert>Video</alert>: <em>The Sum Rule and Partitions</em>
    </p>


    <definition xml:id="def-partition">
        <title>Partition</title>
        <statement>
            <p>
                Let <m>A</m> be a finite set.
                We say that <m>B_1,B_2,\ldots,B_m</m> form a <term>partition</term> of <m>A</m> if
                <ul>
                    <li><m>B_i \cap B_j = \varnothing</m> for all <m>i \ne j</m>, and</li>
                    <li><m>B_1 \cup B_2 \cup \cdots \cup B_m = A</m>.</li>
                </ul>
            </p>
        </statement>
    </definition>

    <principle xml:id="prin-sum-rule">
        <title>Sum Rule</title>
        <statement>
            <p>
                If <m>B_1,B_2,\ldots,B_m</m> form a partition of <m>A</m>, then
                <me> |A| = \sum_{i=1}^m |B_i| = |B_1| + |B_2| + \cdots + |B_m|</me>.
            </p>
        </statement>
    </principle>

    <p>
        The <xref text="custom" ref="prin-sum-rule">Sum Rule</xref> essentially tells us that in order to count a set of objects, we can break these objects up into disjoint cases, count each case separately, then add them all together in the end.
        Sounds reasonable!
    </p>
    <exercise xml:id="ex-counting-twitter">
        <title>Twitter Followers</title>
        <statement>
            <p>
                TJ is an avid Twitter user, where he manages the following accounts:
                <ul> 
                    <li>A <url href="https://twitter.com/tjyusun">personal account</url> with 200 followers;</li>
                    <li>A K-pop stan Twitter account with 2500 followers;</li>
                    <li>A third account with 12000 followers that tweets a picture of a puppy every hour.</li>
                </ul>
                Can you determine the total number of unique followers TJ has?
                Explain whether or not the <xref text="custom" ref="prin-sum-rule">Sum Rule</xref> is applicable to this problem.
            </p>
        </statement>
        <hint>
            <p>To apply the Sum Rule, one needs to have a partition.</p>
        </hint>
        <solution>
            <p>
                If all followers among TJ's three accounts are different people, then we could just add <me>200 + 2500 + 12000 = 14700</me> to get the total number of unique followers.
                However this is very possibly not the case!
            </p>
            <p>
                For instance, if we knew that a hundred of TJ's followers on his personal account also follow the puppy auto-tweeter, then the number of unique followers among all three accounts is no more than 14600. 
                This is lower if there is more overlap.
            </p>
            <p>
                The <xref text="custom" ref="prin-sum-rule">Sum Rule</xref>does not apply becase the three sets of followers do not form a <xref text="custom" ref="def-partition">partition</xref> of the set we want to count (the first condition fails).
            </p>
        </solution>
    </exercise>

    <p>
        When we need to count objects that are constructed by performing <em>successive steps</em> or operations that are independent, we use the <alert>Product Rule</alert>.
    </p>
    
    <sidebyside>    
    <video xml:id="video-product-rule" youtube="bgeL_Uoqq2U" play-at="embed" />
    </sidebyside>
    <p>
        <alert>Video</alert>: <em>The Product Rule</em>
    </p>



    <principle xml:id="prin-prod-rule">
    <title>Product Rule</title>
        <statement>
            <p>
                If a certain operation takes <m>k</m> steps to accomplish, and if there are:
                <ul>
                    <li><m>r_1</m> ways of performing step 1,</li>
                    <li><m>r_2</m> ways of performing step 2 (regardless of how step 1 was performed),</li>
                    <li><m>r_3</m> ways of performing step 3 (regardless of how step 2 was performed),</li>
                    <li>and so on<ellipsis/></li>
                </ul>
                Then, there are <me>\prod_{i=1}^k r_i = r_1 \cdot r_2 \cdot \ldots \cdot r_k</me> ways of performing steps 1 to <m>k</m>.
            </p>
        </statement>
    </principle>
    

    <exercise xml:id="ex-counting-outfit">
        <title>Counting Outfits</title>
        <statement>
            <p>
            You are deciding what outfit to wear to your Zoom class today. You have been putting off doing laundry, so you only have 3 clean shirts and 3 clean pairs of pants. Also, you have 8 pairs of socks to choose from.

            How many different outfits can you wear to school today? (Assume you cannot go to school shirtless, but you can go pantless or barefoot<mdash/>no one will see!)
            </p>
        </statement>
        <solution>
            <p>
                The operation of <em>picking an outfit to wear to school</em> can be broken down into the following steps:
                <ol>
                    <li>Pick a shirt (3 choices)</li>
                    <li>Pick a pair of pants (4 choices, including no pants; regardless of which shirt you picked)</li>
                    <li>Pick a pair of socks (9 choices, including barefoot; regardless of which shirt/pants you wear)</li>
                </ol>
                So it takes 3 steps to decide on an outfit, where <m>r_1 = 3</m>, <m>r_2 = 4</m>, and <m>r_3 = 9</m>.
                By the Product Rule, there are <m>3 \cdot 4 \cdot 9 = 108</m> different outfits you can choose to wear.
            </p>
            <p>
                We can represent these possibilities as different paths through the following tree diagram starting at the leftmost node <m>0</m> and ending at one of the rightmost nodes.
            </p>
            <sidebyside width="70%" margins="auto">
                <image xml:id="img-counting-tree-diagram">
                    <latex-image>
                        \begin{tikzpicture}[scale=0.6]
                        \path (0,8) node[draw,shape=circle] (0) {\footnotesize 0};
                        \foreach \i in {1,2,3}
                        {
                            \pgfmathtruncatemacro{\in}{6*\i - 4};
                            \path (4,\in) node[draw,shape=circle] (s\i) {\footnotesize $s_{\i}$};
                            \draw (0) -- (s\i);
                        }
                        \foreach \i in {1,2,3,4}
                        {
                            \pgfmathtruncatemacro{\in}{2*\i + 9};
                            \path (8,\in) node[draw,shape=circle] (p\i) {\footnotesize $p_{\i}$};
                            \draw (s3) -- (p\i);
                        }
                        \draw (s1) -- (6,0.5);
                        \draw (s1) -- (6,1.5);
                        \draw (s1) -- (6,2.5);
                        \draw (s1) -- (6,3.5);
                        \node at (7,2) {$\vdots$};
                        \draw (s2) -- (6,6.5);
                        \draw (s2) -- (6,7.5);
                        \draw (s2) -- (6,8.5);
                        \draw (s2) -- (6,9.5);
                        \node at (7,8) {$\vdots$};
                        \foreach \i in {1,2,3,4,5,6,7,8,9}
                        {
                            \pgfmathtruncatemacro{\in}{2*\i + 1};
                            \path (14,\in) node[draw,shape=circle] (k\i) {\footnotesize $k_{\i}$};
                            \draw (p1) -- (k\i);
                        }
                        \draw (p4) -- (10,15);
                        \draw (p4) -- (10,15.5);
                        \draw (p4) -- (10,16);
                        \draw (p4) -- (10,16.5);
                        \draw (p4) -- (10,17);
                        \draw (p4) -- (10,17.5);
                        \draw (p4) -- (10,18);
                        \draw (p4) -- (10,18.5);
                        \draw (p4) -- (10,19);
                        \node at (11,17) {$\vdots$};
                        \end{tikzpicture}
                    </latex-image>
                </image>
            </sidebyside>
        </solution>
    </exercise>

    <exercise xml:id="ex-counting-prove-product">
        <title>Proof of the Product Rule</title>
        <statement>
            <p>
                Use the <xref text="custom" ref="prin-sum-rule">Sum Rule</xref> to prove the <xref text="custom" ref="prin-prod-rule">Product Rule</xref>.
            </p>
        </statement>
        <hint><p>Induction on <m>k</m>.</p></hint>
    </exercise>
    <example xml:id="eg-counting-mcq">
        <title>Multiple Choice Exam</title>
        <statement>
            <p>
                A multiple-choice exam has 20 questions and four choices for each question.
                How many possible combinations of responses are there?
            </p>
            <sidebyside widths="30%">
            <image source="figs/mcq1.png" width = "30%"><description>Multiple-choice bubble sheet with five questions and four boxes each for choices A, B, C, D.</description></image>            
            </sidebyside>
            </statement>
            <solution>
            <p>
                Answering the whole test takes 20 individual, independent steps: picking one answer to each question.
                If we assume each question needs to have one answer, then in the statement of the <xref ref="prin-prod-rule" text="custom">Product Rule</xref>, <m>r_1 = 4</m>, <m>r_2 = 4</m>, and so on until <m>r_{20} = 4</m>, giving a total of <me>\underbrace{4 \times 4 \times \cdots \times 4}_{\text{20 times}} = 4^{20}=1099511627776</me> possible answer combinations.
            </p>
            <p>
                In other words, pure guessing as a strategy will on average result in a perfect score once every one trillion tries.
                In comparison, the odds of matching six numbers in Lotto 6/49 is much better: one in 14 million.
            </p>
            <p>
                If we allow questions to be left unanswered, then there are <m>5^{20}=95367431640625</m>, around 96 trillion possible ways to answer the test. 
            </p>
        </solution>
    </example>
    
    <exercise xml:id="ex-counting-coldplay2">
        <title>Concert Seating with <m>n</m> people</title>
        <statement>
            <p>
                Apply the Product Rule to answer (a) and (b) of <xref ref="ex-counting-coldplay" />, then generalize this method to count the number of ways to sit <m>n</m> people in a row of <m>n</m> seats.
            </p>
        </statement>
        <solution>
            <p>
                We can generalize <xref ref="ex-counting-coldplay"/>as follows: if <m>n</m> people want to sit in a row of <m>n</m> seats (with no restriction), then the whole operation of assigning seats to people takes <m>n</m> steps, where the first person has <m>n</m> seats to choose from, the next person has <m>n-1</m>, and so on, until 1 seat is left for the last person.
                The Product Rule then gives a total number of
                <me>n \cdot (n-1) \cdot (n-2) \cdot \ldots \cdot 2 \cdot 1</me> ways that <m>n</m> people can sit in <m>n</m> seats in a row.
            </p>
        </solution>
    </exercise>
    <p>
        Because the following operation frequently turns up in counting problems, we have a special name for it.
    </p>

    <definition xml:id="def-factorial">
        <title>Factorial</title>
        <statement>
            <p>
            For integer <m>n \geq 0</m>, the <term>factorial</term> of <m>n</m>, denoted by <m>n!</m>, is 
            <me> n! = \prod_{i=1}^n i = n \cdot (n-1) \cdot (n-2) \cdot \ldots \cdot 2 \cdot 1</me>.
            By convention we define <m>0! = 1</m>.
            <notation>
                <usage>n!</usage>
                <description>factorial</description>
            </notation>
            </p>
        </statement>
    </definition>
    <remark xml:id="remark-factorial">
            <p>
                For problems where the answer involves a factorial, it is fine to leave the factorial in your answer without computing the actual value.
            </p>
    </remark>
    <example xml:id="eg-counting-dogs-again">
        <title>Dog Adoption, again</title>
        <statement>
        <p>
            <xref ref="eg-counting-dogs"/> had too many combinations to list, but using the <xref text="custom" ref="prin-prod-rule">Product Rule</xref> we see that there are a total of <me>10! = 10 \times 9 \times 8 \times \cdots \times 1 = 3628800 \text{ combinations}</me>.
        </p>
        </statement>
    </example>

    <exercise xml:id="ex-counting-party-leaders">
        <title>Trip Planning</title>
        <statement>
            <p>
                Four friends (Erin, Jagmeet, Yves-François, and Annamie) are planning a trip to Ottawa, and they need to assign tasks (booking flights, booking hotel rooms, and making an itinerary) to three people. Erin cannot be trusted to make an itinerary; also, either Jagmeet or Annamie must book hotel rooms. How many ways can they assign tasks?
            </p>
            <p>
                Think carefully about which counting principle(s) to apply here.
                Explain your method of calculation properly.
            </p>
        </statement>
        <hint>
            <p> 
               
                A diagram would be useful.
            </p>
        </hint>
    </exercise>

<solutions inline="solution">
    <title>Solutions to Selected Checkpoints</title>
</solutions>


</section>
